# Python to Linux Web App on Azure
# Build your Python project and deploy it to Azure as a Linux Web App.
# Change python version to one thats appropriate for your application.
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

name: Azure Pipelines
variables:
  # Azure Resource Manager connection created during pipeline creation
  azureServiceConnectionId: 'eeac49b4-1894-49b3-91df-04c9be1f4656'

  # Web app name
  webAppName: 'project3'

  # Agent VM image name
  vmImageName: $(packer-temp)

  # Environment name
  environmentName: 'test'

  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)

  # Python version: 3.7
  pythonVersion: '3.7'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: BuildJob
    pool:
      vmImage: ubuntu-20.04
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
      displayName: 'Use Python $(pythonVersion)'

    #- script: |
        #python -m venv antenv
        #source antenv/bin/activate
        #python -m pip install --upgrade pip
        #pip install setup
        #pip install -r requirements.txt
      #workingDirectory: $(System.DefaultWorkingDirectory)
      #displayName: "Install requirements"
    
    #- task: InstallSSHKey@0
      #displayName: 'Install an SSH key'
      #inputs:
        #knownHostsEntry: 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ=='
        #sshPublicKey: '$(udacityPubKey)'
        #sshKeySecureFile: 'myKey'
    
    - task: DownloadSecureFile@1
      name: udacity_public_key
      displayName: 'Download Public Key'
      inputs:
        secureFile: 'myKey.pub'
  
    #- task: TerraformInstaller@0
      #displayName: 'Install Terraform 0.12.12'
      #inputs:
        #terraformVersion: '0.12.12'
        
    - task: TerraformTaskV1@0
      displayName: 'Initialize Terraform'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environment/test'
        backendServiceArm: $(azureServiceConnectionId)
        backendAzureRmResourceGroupName: 'tstate-rg'
        backendAzureRmStorageAccountName: 'tstate2904'
        backendAzureRmContainerName: 'tstate-cn'
        backendAzureRmKey: 'terraform.tfstate'
      

    - task: TerraformTaskV1@0
      inputs:
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environment/test' 
        backendAzureRmResourceGroupName: 'tstate-rg'
        backendAzureRmStorageAccountName: 'tstate2904'
      displayName: 'Run terraform validate'
    
    #- task: TerraformTaskV1@0
      #inputs:
        #provider: 'azurerm'
        #command: plan
        #workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environment/test'
        #commandOptions: '-var "public_key_path=$(udacity_public_key.secureFilePath)"'
        #environmentServiceNameAzureRM: $(azureServiceConnectionId)
        #backendServiceArm: $(azureServiceConnectionId) 
      #displayName: 'Tarraform Plan'
    - task: TerraformTaskV1@0
      displayName: 'Deploy Cloud Infrastructure'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environment/test'
        commandOptions: '-var "public_key_path=$(udacity_public_key.secureFilePath)"'
        environmentServiceNameAzureRM: $(azureServiceConnectionId) 
        

    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: 'jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
        #replaceExistingArchive: true

    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload FakeRestAPI package'
      artifact: drop-fakerestapi

    - publish: selenium/login.py
      displayName: 'Upload UI Tests definition'
      artifact: drop_ui_tests


- stage: Deploy
  displayName: 'Deploy Web App'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployfakeRestAPI
    pool:
      vmImage: ubuntu-20.04
    environment: $(TEST)
    strategy:
      runOnce:
        deploy:
          steps:

          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
            displayName: 'Use Python version'

          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App : project3'
            inputs:
              azureSubscription: $(azureServiceConnectionId)
              appName: $(webAppName)
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip