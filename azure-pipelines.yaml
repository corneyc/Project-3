# Python to Linux Web App on Azure
# Build your Python project and deploy it to Azure as a Linux Web App.
# Change python version to one thats appropriate for your application.
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

name: Azure Pipelines
trigger: 
  - main

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureServiceConnectionId: '4b5e9f3a-d138-443c-8dbd-f9ac3a99843f'

  azureSubscription: 'corneyc-projects-connection (e1b9dc3d-d767-4329-887b-85b9424a7d8b)'

  # Web app name
  webAppName: 'project3'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # Environment name
  environmentName: 'project3'

  # Project root folder. Point to the folder containing login.py file.
  projectRoot: $(System.DefaultWorkingDirectory)

  # Python version: 3.7.6
  pythonVersion: '3.7.6'

  # Terraform version 0.14.7
  tf_version: "0.14.7" 

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: BuildJob
    pool:
      vmImage: $(vmImageName)
    steps:
    #Needed for terraform VM deployment
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: "Install Terraform $(tf_version)"
      inputs:
        terraformVersion: "$(tf_version)"
     
    # Commented out as it was clashing/repetition with DownloadSecure
    #- task: InstallSSHKey@0
      #inputs:
        #knownHostsEntry: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC3gXrVv7Fj4EEI4zAt9dvnM6M8eV/O2SEjnMVMZGfRLPCzqgXsj4VKk6mU1ihP1aFXhhMUlKes4nIaKKx28trtQBBR8Uy53nUlaa2yaoXaaX+KvURR1TAsjHZNL/0JCGovGztg7yo1Hhi5EO4JMDvvY9gy7vAThSuPnZMeLj4ZpWXfuVUPa3HwQZSpHlY+T5/WBNSfrkf+TwH1rWCoKKqppU3e3bYQ4slk2/I9DWzkMBKdDxTKzQYTJyAhbMMtkxT1+AkWlPsx5o2h5VwsAtLdXLlbTpoxUDvRWfkmgA/w69UMv2ly5kIoj0KiIZ3kyTnSBT1D6/DtM/JX8A44Rf4CcQXxHiEzBwiMBNLu0U3jIACNaOW+2MmxRrFoEc/EMqvV83SLxBsMPMV4nHFoKaOFr+XI5vQId05yKx90u3wV6fUCoXUgFvdJz9seWxQcLWh5v3IV3vhGVdIJvwci3yDCczkAa6D07ns9NPoQ+hz5nAI4t7fIlDPuPj/OT69YjfU= corneliuspchakabva@Corneliuss-Mini'
        #sshPublicKey: '$(udacityPubKey)'
        #sshKeySecureFile: 'mykey'
    
    - task: DownloadSecureFile@1
      name: udacity_public_key
      displayName: 'Download Public Key'
      inputs:
        secureFile: 'myKey.pub'
   
   # Terraform init, plan, validate, apply commands
    - task: TerraformTaskV1@0 
      displayName: 'Initialize Terraform'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environment/test'
        backendServiceArm: 'corneyc-projects-connection (e1b9dc3d-d767-4329-887b-85b9424a7d8b)'
        backendAzureRmResourceGroupName: 'tstate-rg'
        backendAzureRmStorageAccountName: 'tstate2904'
        backendAzureRmContainerName: 'tstate-cn'
        backendAzureRmKey: 'terraform.state'

    - task: TerraformTaskV1@0
      displayName: 'Validate Terraform'
      inputs:
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environment/test' 
        commandOptions: '-var "public_key_path=$(udacity_public_key.secureFilePath)"'
        environmentServiceNameAzureRM: $(azureServiceConnectionId)
      
    - task: TerraformTaskV1@0
      displayName: 'Plan Terraform'
      inputs:
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environment/test'
        commandOptions: '-var "public_key_path=$(udacity_public_key.secureFilePath)"'
        environmentServiceNameAzureRM: $(azureServiceConnectionId)

    - task: TerraformTaskV1@0
      displayName: 'Apply Terraform'
      inputs:
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environment/test'
        commandOptions: '-var "public_key_path=$(udacity_public_key.secureFilePath)"'
        environmentServiceNameAzureRM: $(azureServiceConnectionId)    

    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: 'jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload FakeRestAPI Package'
      artifact: drop-fakerestapi

    - publish: selenium/login.py
      displayName: 'Upload UI Tests definition'
      artifact: drop-ui-tests

- stage: Deploy
  jobs:
  - deployment: DeployFakeRestAPI
    displayName: 'Deploy app to custom VM'
    pool:
      vmImage: $(vmImageName)
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
            - task: AzureWebApp@1
              displayName: 'Deploy Azure Web App'
              inputs:
                azureSubscription: '$(azureSubscription)'
                appType: 'webApp'
                appName: '$(webAppName)'
                package: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip'
                deploymentMethod: 'auto'

            - task: Bash@3
              displayName: 'Install Postman & Newman'
              inputs:
                targetType: 'inline'
                script: |
                  #! /bin/bash
                  sudo snap install postman
                  sudo npm install -g newman
                  sudo npm install newman-reporter-junitfull -g      
            
            # TODO: Install JMeter 
            
            - task: Bash@3
              displayName: 'Install Selenium'
              inputs:
                targetType: 'inline'
                script: |
                  #! /bin/bash

                  sudo apt-get upgrade -y
                  sudo apt-get install python3-pip -y
                  sudo apt-get install unzip -y
                  sudo apt-get install -y chromium-browser
                  pip3 install selenium
                  export PATH=$PATH:some/path

            - task: Bash@3
              displayName: 'Selenium Tests'
              inputs:
                targetType: 'inline'
                script: |
                  #! /bin/bash
                
                  # TODO: Execute test suite for Selenium  
                  echo 'hello from custom VM'
                  pwd
                  find .
