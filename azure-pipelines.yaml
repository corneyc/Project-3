# Python to Linux Web App on Azure
# Build your Python project and deploy it to Azure as a Linux Web App.
# Change python version to one thats appropriate for your application.
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

name: Azure Pipelines

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureServiceConnectionId: '4b5e9f3a-d138-443c-8dbd-f9ac3a99843f'

  # Web app name
  webAppName: 'project3'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # Environment name
  environmentName: 'project3'

  # Project root folder. Point to the folder containing login.py file.
  projectRoot: $(System.DefaultWorkingDirectory)

  # Python version: 3.7.6
  pythonVersion: '3.7.6'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: BuildJob
    pool:
      vmImage: $(vmImageName)
    steps:
    #Needed for terraform VM deployment
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: ''
        sshPublicKey: '$(udacityPubKey)'
        sshKeySecureFile: 'mykey'
    - task: DownloadSecureFile@1
      name: udacity_public_key
      displayName: 'Download Public Key'
      inputs:
        secureFile: 'myKey.pub'
    #- task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
      #displayName: 'Install Terraform'
      #inputs:
        #terraformVersion: '0.14.7'
  
    - task: TerraformTaskV1@0 
      displayName: 'Initialize Terraform'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environment/test'
        backendServiceArm: 'corneyc-projects-connection (e1b9dc3d-d767-4329-887b-85b9424a7d8b)'
        backendAzureRmResourceGroupName: 'tstate-rg'
        backendAzureRmStorageAccountName: 'tstate2904'
        backendAzureRmContainerName: 'tstate-cn'
        backendAzureRmKey: 'terraform.state'

    - task: TerraformTaskV1@0
      displayName: 'Plan Terraform'
      inputs:
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environment/test'
        commandOptions: '-var "public_key_path=$(udacity_public_key.secureFilePath)"'
        environmentServiceNameAzureRM: $(azureServiceConnectionId)

    - task: TerraformTaskV1@0
      displayName: 'Apply Terraform'
      inputs:
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environment/test'
        commandOptions: '-var "public_key_path=$(udacity_public_key.secureFilePath)"'
        environmentServiceNameAzureRM: $(azureServiceConnectionId)    

    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: 'jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload FakeRestAPI Package'
      artifact: drop-fakerestapi

- stage: Deploy
  displayName: 'Deploy app to custom VM'
  condition: succeeded()
  jobs:
  - deployment: DeployFakeRestAPI
    pool:
      vmImage: $(vmImageName)
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:
            - task: AzureWebApp@1
              displayName: 'Deploy Azure Web App'
              inputs:
                azureSubscription: $(azureServiceConnectionId)
                appName: $(webAppName)
                appType: webApp
                package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip


